#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef CORESDK_SWIFT_H
#define CORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS_NAMED("AnomalyInformation")
@interface AnomalyInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;

SWIFT_CLASS_NAMED("ConnectedSource")
@interface ConnectedSource : NSObject
@property (nonatomic, readonly) NSInteger dataSource;
@property (nonatomic, readonly, copy) NSString * _Nonnull connectedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ConstantValue")
@interface ConstantValue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ConstantData")
@interface ConstantData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The main SDK class for performing actions on integration and processing user data
SWIFT_CLASS_NAMED("CoreConnector")
@interface CoreConnector : NSObject
/// Initializes a ThryveConnector object.
/// \param appId current application id.
///
/// \param appSecret current application secret.
///
/// \param partnerUserId (Optional) company’s partner id. “nil” is set by default
///
/// \param language (Optional) set the language code i.e “en” of “fr”.
/// It is needed to display the Data Source page translated to a selected language.
/// If not set, the “de” is by default
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId appSecret:(NSString * _Nonnull)appSecret partnerUserId:(NSString * _Nullable)partnerUserId language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;
@class Tracker;
@class CustomerValue;
@class User;
@class UserInformation;

@interface CoreConnector (SWIFT_EXTENSION(CoreSDK))
/// Invokes the REST API asynchronously to retrieve accessToken.
/// \param completionHandler returns access token in a success case and error in failure
///
- (void)getAccessTokenWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Sets the provided access token manually and save it in a keychain
/// Parameters:
/// \param accessToken Access token to save.
///
- (void)setAccessToken:(NSString * _Nonnull)accessToken;
/// Invokes the REST API asynchronously to generate a new DataSource Url.
/// requires:
/// before calling this function, call “getAccessToken” first!
/// \param completionHandler return url, session token and error
///
- (void)getDataSourceUrlWithCompletionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Invokes the REST API asynchronously to generate a new Direct connection URL.
/// requires:
/// before calling this function, call “getAccessToken” first!
/// warning:
/// please use this method only if you implement your own web requests logic
/// like creating <em>WKWebView</em> on your own and implementing <em>WKNavigationDelegate</em>.
/// After generating the URL, you can pass it to your webView for a loading request.
/// \param tracker data source to connect
///
/// \param completionHandler returns asynchronously in background
/// direct connection url if the url was generated successfully,
/// and <em>ConnectionError</em> error if url was not generated
///
- (void)directConnectionTo:(Tracker * _Nonnull)tracker completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler;
/// Invokes the REST API asynchronously to generate a new Direct revoke URL.
/// requires:
/// before calling this function, call “getAccessToken” first!
/// warning:
/// please use this method only if you implement your own web requests logic
/// like creating <em>WKWebView</em> on your own and implementing <em>WKNavigationDelegate</em>
/// After generating the URL, you can pass it to your webView for a loading request.
/// \param tracker data source to revoke
///
/// \param instant set this to true to skip the confirmation about revoking.
/// False by default
///
/// \param completionHandler returns asynchronously in background direct
/// revoke url if the url was generated successfully,
/// and <em>ConnectionError</em> error if url was not generated
///
- (void)directRevokeFrom:(Tracker * _Nonnull)tracker instant:(BOOL)instant completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler;
/// Invokes the REST API asynchronously to chect the connection/revoke status of Direct connection/revoke.
/// Returns connection status as Bool. True if connected, False, if not connected.
/// Returns also False and not nil <em>ConnectionError</em> error in case if URL is not
/// appropriate (Does no contain any information about connection/revoking)
/// requires:
/// before calling this function, call “getAccessToken” first!
/// warning:
/// please use this method only if you implement your own web requests logic
/// like creating <em>WKWebView</em> on your own and implementing <em>WKNavigationDelegate</em>.
/// You can call this method inside <em>didFinishNavigation</em> method of <em>WKNavigationDelegate</em>,
/// it will check the URL every time when your webView is finished with a page loading.
/// \param url pass the result url, which is generated after successfull connection
/// or revoking for a specific tracke
///
/// \param completionHandler will report about connection status and <em>ConnectionError</em> error if
/// URL does not contain any information about the connection/revoke.
///
- (void)connectedWithUrl:(NSURL * _Nonnull)url completionHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Performs user constant data upload.
/// requires:
/// uses accessToken to upload data
/// \param data Customer value (constant value without date)
///
/// \param completionHandler returns response status and error
///
- (void)uploadConstantValueWithData:(CustomerValue * _Nonnull)data completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Performs user daily data upload.
/// requires:
/// uses accessToken to upload data
/// \param data Customer value (daily value with date)
///
/// \param completionHandler returns response status and error
///
- (void)uploadDailyDynamicValueWithData:(CustomerValue * _Nonnull)data completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Performs user daily data upload.
/// requires:
/// uses accessToken to upload data
/// \param data User data
///
/// \param completionHandler returns response status and error
///
- (void)uploadUserInformationWithData:(User * _Nonnull)data completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Performs user information retrieval.
/// requires:
/// uses accessToken to upload data
/// \param completionHandler returns <em>UserInformation</em> collection
/// in a success case and if failure - error and empty collection
///
- (void)getUserInformationWithCompletionHandler:(void (^ _Nonnull)(NSArray<UserInformation *> * _Nonnull, NSError * _Nullable))completionHandler;
@end

@protocol CoreWebViewDelegate;
@class WKWebView;
@class NSBundle;
@class NSCoder;

/// The open class for handling direct connection or direct revoke
/// in one  <em>WKWebView</em> class instance of <em>WebKit</em> framework.
/// You can initialize the object of this class and the call <em>loadDirectConnection</em>
/// or <em>loadDataSourceConnection</em> to perform WKWebView handling
/// or inherit this class to a custon <em>UIViewController</em> and call the above described methods.
SWIFT_CLASS_NAMED("CoreWebViewController")
@interface CoreWebViewController : UIViewController <WKUIDelegate>
/// The delegate responsible for handling direct connection or direct revoke to chosen data source.
/// Can be implemented by <em>UIViewController</em> or <em>Coordinator</em> (SwiftUI)
@property (nonatomic, weak) id <CoreWebViewDelegate> _Nullable coreWebViewDelegate;
/// The instance of <em>WKWebView</em>
@property (nonatomic, readonly, strong) WKWebView * _Nonnull webView;
/// Override this method in order to set appropriate commands for loading a web content
/// in a <em>webView</em> like <em>loadDirectConnection()</em> or <em>loadDataSourceConnection()</em>
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface CoreWebViewController (SWIFT_EXTENSION(CoreSDK))
/// Invokes the REST API asynchronously to request Data Source Direct Connection.
/// Call this function directly in <em>viewDidLoad()</em> or <em>updateUIView()</em> (SwiftUI) method
/// requires:
/// before calling this function, call “getAccessToken” first!
- (void)loadDirectConnection;
/// Invokes the REST API asynchronously to request Data Source Direct Connection.
/// Call this function directly in <em>viewDidLoad()</em> or <em>updateUIView()</em> (SwiftUI) method
/// requires:
/// before calling this function, call “getAccessToken” first!
- (void)loadDirectRevoke;
/// Invokes the REST API asynchronously to request Data Source Connection
/// and present the webView with list of all avaliable Trackers.
/// requires:
/// before calling this function, call “getAccessToken” first!
- (void)loadDataSourceConnection;
/// Use this to clear <em>webView</em> caches
- (void)clearCaches;
@end

@class WKWebViewConfiguration;
@class WKNavigationAction;
@class WKWindowFeatures;
@class WKNavigation;

@interface CoreWebViewController (SWIFT_EXTENSION(CoreSDK)) <WKNavigationDelegate>
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end


/// The delegate responsible for handling direct connection or direct revoke to chosen data source.
/// Can be implemented by <em>UIViewController</em> or <em>Coordinator</em> (SwiftUI)
SWIFT_PROTOCOL_NAMED("CoreWebViewDelegate")
@protocol CoreWebViewDelegate <NSObject>
/// CoreConnector instance needed to perform data source url retreival
@property (nonatomic, strong) CoreConnector * _Nullable connector;
/// (For direct connection only)
/// Init with <em>false</em> to perform direct revoke or <em>true</em> to perform direct connection
@property (nonatomic) BOOL connection;
/// (For direct connection only)
/// Init with <em>false</em> to perform direct revoke instantly or <em>true</em>
/// to perform direct revoke with HTML alert dialog
@property (nonatomic) BOOL instantRevoke;
/// (For direct connection only) Pick up one of supported data source.
@property (nonatomic, strong) Tracker * _Nullable source;
/// (For direct connection only)
/// The callback notifiying about the connection status of selected supported data source
/// \param webView the <em>CoreConnectorWebView</em> object
/// implementing <em>WKNavigationDelegate</em> for navigation handling
///
/// \param source (optional) selected source which was initially set in <em>source</em> property
/// of <em>CoreConnectorWebViewDelegate</em> delegate. Is set to nil if the data source page is loaded.
///
/// \param connected the connection status of the source. True if connected, False if disconnected.
///
/// \param hasSocialLoginError if the connection has gone through an unsupported social oAuth gateway. default is <code>false</code>.
///
/// \param error error notifiying if the connection was performed with troubles.
///
- (void)webView:(WKWebView * _Nonnull)webView source:(Tracker * _Nullable)source connected:(BOOL)connected hasSocialLoginError:(BOOL)hasSocialLoginError error:(NSError * _Nullable)error;
@end

@class CustomerPayload;

/// A Struct model for Thryve dynamic data. Use this to create
/// Constant or Dayily values for customer’s backchannel support.
SWIFT_CLASS_NAMED("CustomerValue")
@interface CustomerValue : NSObject
/// Creates a Codable object (JSON) for body of the REST request
/// \param data the payload, a collection of user’s daily or constant values
///
- (nonnull instancetype)initWithData:(NSArray<CustomerPayload *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DataType;
@class NSDate;

/// A Struct model for dynamic data payload
SWIFT_CLASS_NAMED("CustomerPayload")
@interface CustomerPayload : NSObject
/// Creates an instance of the payload node for Constant Value.
/// \param value the value of a measurement in a string representation.
///
/// \param type the type recognized by Thryve services.
///
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value of:(DataType * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of the payload node for Daily Value.
/// \param value the value of a measurement in a string representation.
///
/// \param day a desired day.
///
/// \param type the type recognized by Thryve services.
///
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value of:(DataType * _Nonnull)type on:(NSDate * _Nonnull)day;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DataSource;

SWIFT_CLASS_NAMED("DailyDynamicValue")
@interface DailyDynamicValue : NSObject
- (nonnull instancetype)initWithAuthenticationToken:(NSString * _Nonnull)authenticationToken dataSources:(NSArray<DataSource *> * _Nonnull)dataSources OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DailyData")
@interface DailyData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DataSource")
@interface DataSource : NSObject
- (nonnull instancetype)initWithDataSource:(NSInteger)dataSource data:(NSArray<DailyData *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Details")
@interface Details : NSObject
@property (nonatomic, readonly) NSInteger timezoneOffset;
- (nonnull instancetype)initWithTimezoneOffset:(NSInteger)timezoneOffset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Thryve stored source infromation.
SWIFT_CLASS_NAMED("DataSourceInformation")
@interface DataSourceInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ValueType : NSInteger;

/// An abstract available Thryve data type.
SWIFT_CLASS_NAMED("DataType")
@interface DataType : NSObject
@property (nonatomic) enum ValueType valueType;
@property (nonatomic) NSInteger type;
@property (nonatomic, copy) NSString * _Nullable name;
/// Creates an instance of ThryveDataType
/// \param type the integer value of the data type recognised by Thryve
///
/// \param valueType the type of the value (boolean, long etc.)
///
/// \param name (optional) provide a custon name for a type
///
- (nonnull instancetype)init:(NSInteger)type :(enum ValueType)valueType :(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Thryve stored upload infromation.
SWIFT_CLASS_NAMED("DataUploadInformation")
@interface DataUploadInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An enum of available Genders
typedef SWIFT_ENUM_NAMED(NSInteger, Gender, "Gender", open) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderGenderless = 2,
};


SWIFT_CLASS("_TtC7CoreSDK13NetworkClient")
@interface NetworkClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

@interface NetworkClient (SWIFT_EXTENSION(CoreSDK)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end





SWIFT_CLASS_NAMED("PolicyInformation")
@interface PolicyInformation : NSObject
- (nonnull instancetype)initWithData:(NSInteger)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class QuestionnairePayload;

/// Questionnaire data payload for questionnaire upload requsts
SWIFT_CLASS_NAMED("QuestionnaireValue")
@interface QuestionnaireValue : NSObject
- (nonnull instancetype)initWithData:(NSArray<QuestionnairePayload *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("QuestionnairePayload")
@interface QuestionnairePayload : NSObject
- (nonnull instancetype)init:(NSInteger)module_ :(NSInteger)dynamicQuestionnaireValueType :(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Thryve stored source infromation.
SWIFT_CLASS_NAMED("SourceInformation")
@interface SourceInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Tracker class for devices which are responsible for gathering the user’s data
SWIFT_CLASS_NAMED("Tracker")
@interface Tracker : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Use this init to create an instance of a DataSource according to Thryve documentation
- (nonnull instancetype)init:(NSString * _Nullable)name :(NSInteger)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSNumber;

/// A model for User
SWIFT_CLASS_NAMED("User")
@interface User : NSObject
/// Creates an instance of the payload node for User.
/// \param height the users’s height (NSNumber)
///
/// \param weight the users’s weight (NSNumber)
///
/// \param birthdate the users’s birthdate
///
/// \param gender the users’s gender
///
- (nonnull instancetype)initWithHeight:(NSNumber * _Nullable)height weight:(NSNumber * _Nullable)weight birthdate:(NSDate * _Nullable)birthdate gender:(NSNumber * _Nullable)gender postalCode:(NSString * _Nullable)postalCode;
/// Creates an instance of the empty payload node for User.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Thryve stored user infromation.
SWIFT_CLASS_NAMED("UserInformation")
@interface UserInformation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable authenticationToken;
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerUserID;
@property (nonatomic, readonly, copy) NSString * _Nullable birthdate;
@property (nonatomic, readonly, copy) NSString * _Nullable gender;
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
@property (nonatomic, readonly, copy) NSArray<ConnectedSource *> * _Nullable connectedSources;
- (NSInteger)getHeight SWIFT_WARN_UNUSED_RESULT;
- (double)getWeight SWIFT_WARN_UNUSED_RESULT;
@end

/// Supported value types
typedef SWIFT_ENUM_NAMED(NSInteger, ValueType, "ValueType", open) {
  ValueTypeDouble = 0,
  ValueTypeLong = 1,
  ValueTypeBoolean = 2,
  ValueTypeDate = 3,
  ValueTypeString = 4,
  ValueTypeJson = 5,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
